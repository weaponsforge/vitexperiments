name: Deploy to GitHub Pages

# This workflow will trigger on any tag/release created from the `main` branch
on:
  release:
    types: [published]

jobs:
  lint-export-app:
    name: Lint and Export client
    if: github.event.release.target_commitish == 'main'
    runs-on: ubuntu-latest
    env:
      VITE_PUBLIC_BASE_PATH: ${{ secrets.VITE_PUBLIC_BASE_PATH }}
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Use NodeJS v20.15.0
        uses: actions/setup-node@v4
        with:
          node-version: 20.15.0
      - name: Install Dependencies and lint
        run: |
          cd app
          npm install
      - name: Lint
        run: |
          cd app
          npm run lint
      - name: Export static files
        run: |
          cd app
          npm run docker:build
        # Rename index.html to 404.html to enable routing rewrites of all assets
      - name: GH Pages Hack - rename index.html to 404.html
        run: |
          cd app
          mv dist/index.html dist/404.html
      - name: Disable Jekyll
        run: touch app/dist/.nojekyll
      - name: Archive Development Artifact
        uses: actions/upload-artifact@v4
        with:
          name: main-out
          include-hidden-files: true
          path: app/dist
          retention-days: 3

  test-app:
    name: Unit Tests
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4

      - name: Use NodeJS v20.15.0
        uses: actions/setup-node@v4
        with:
          node-version: v20.15.0
          registry-url: https://registry.npmjs.org/

      - name: Install Dependencies
        run: |
          cd app
          npm install

      - name: Test
        run: |
          cd app
          npm test

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: app/html/junit.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: app/html/junit.xml
          check_name: "Test Results"

  deploy-client:
    name: Deploy client to Github Pages
    if: github.event.release.target_commitish == 'main'
    needs: [lint-export-app, test-app]
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: main-out
      - name: List files for publish
        run: ls -l -a
      - name: Deploy to Github Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./
          publish_branch: gh-pages

  docker-build-push:
    name: Build and Push Docker Image
    if: github.event.release.target_commitish == 'main' && vars.DOCKERHUB_USERNAME != ''
    needs: [lint-export-app, test-app]
    runs-on: ubuntu-latest
    env:
      REGISTRY: docker.io
      IMAGE_NAME: weaponsforge/vitexperiments
    permissions:
      contents: read
      security-events: write
      packages: write
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate Docker Image Tags and Labels
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            # type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          file: ./app/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            CACHEBUST=${{ github.run_id }}

      - name: Scan Image for Vulnerabilities
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Scan Results to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
